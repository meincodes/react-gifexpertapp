{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"6KAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAE3B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAgBA,OACE,sBAAMC,SAXY,SAACC,GACnBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,MAMhB,SACE,uBAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAhBhB,SAACP,GACzBF,EAAcE,EAAEQ,OAAOF,a,+BCLXG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEhBC,EAFgB,mDAEmCC,UAAWH,GAF9C,+DAGFI,MAAOF,GAHL,cAGhBG,EAHgB,gBAIDA,EAAKC,OAJJ,uBAIfC,EAJe,EAIfA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVpB,kBAclBM,GAdkB,4CAAH,sDCDVO,EAAc,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAErC,OACI,sBAAKc,UAAU,yCAAf,UACG,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCHFO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAEvB,ECFyB,SAACA,GAEzB,MAA0Bd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAmBA,OAbAC,qBAAY,WAERxB,EAASC,GACRwB,MAAM,SAAAC,GAECH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAItB,CAACpB,IAEGqB,EDnBuBK,CAAa1B,GAAhCa,EAAZ,EAAON,KAAaa,EAApB,EAAoBA,QAEnB,OACI,qCACI,oBAAIJ,UAAU,oDAAd,SAAmEhB,IAElEoB,GAAW,wCAEhB,qBAAKJ,UAAU,YAAf,SAGYH,EAAOJ,KAAI,SAAAC,GAAG,OACV,cAAC,EAAD,eAEKA,GADAA,EAAIC,aEfpBgB,EAAe,WAC1B,MAAoCzC,mBAAS,CAAC,cAA9C,mBAAO0C,EAAP,KAAmB3C,EAAnB,KAOA,OACE,qCACE,oBAAI+B,UAAU,uDAAd,0BACA,cAAC,EAAD,CAAa/B,cAAgBA,IAC7B,uBAEA,6BACG2C,EAAWnB,KAAI,SAAAT,GAAQ,OACtB,cAAC,EAAD,CAEAA,SAAWA,GADLA,Y,MCdhB6B,IAASC,OAGL,cAAC,EAAD,IAGFC,SAASC,eAAe,W","file":"static/js/main.7e9ea179.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({setCategories}) => {\n  \n  const [inputValue, setInputValue] = useState('');\n\n  const handleInputChange = (e) => {\n    setInputValue(e.target.value);\n  };\n\n  const handleSumit = (e) => {\n    e.preventDefault();\n\n    if (inputValue.trim().length > 2 ){\n      setCategories(cats => [inputValue, ...cats,  ]);\n      setInputValue('');\n    }\n\n  };\n\n  return (\n    <form onSubmit={handleSumit}>\n      <input type='text' value={inputValue} onChange={handleInputChange} />\n    </form>\n  );\n};\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired\n}","\n\n\n   export const getGifs = async( category ) => {\n\n    const url = `https://api.giphy.com/v1/gifs/trending?q=${ encodeURI (category) }&limit=10&api_key=6WMxyUtFvieSwE6LUqhkYOu1uhDiUeZx`;\n    const resp =  await fetch (url);\n    const {data} = await resp.json();\n\n    const gifs = data.map( img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    })\n\n return gifs;\n\n}","import React from 'react';\n\nexport const GifGridItem = ( {id, title, url} ) => {\n\n    return (\n        <div className=\"card animate__animated animate__zoomIn\">\n           <img src={url} alt={title} />\n           <p>{title}</p>\n        </div>\n    )\n}","import React from 'react';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport {GifGridItem} from './GifGridItem';\n\nexport const GifGrid = ( {category} ) => {\n\n   const {data:images, loading} = useFetchGifs(category);\n\n    return (\n        <>\n            <h3 className=\"animate__animated animate__bounce animate__bounce\">{category}</h3>\n            \n            {loading && <p>Loading</p>}\n            \n        <div className=\"card-grid\">\n            \n                {\n                    images.map(img => (\n                        <GifGridItem\n                        key={img.id}\n                        { ...img }\n                        />\n                    ))\n                }\n            \n        </div>\n        </>\n    )\n}\n","import { useState, useEffect } from 'react';\nimport {getGifs} from '../helpers/getGifs';\n\n\nexport const useFetchGifs = (category) => {\n    \n    const [state, setState] = useState({\n        data: [],\n        loading: true\n\n    });\n\n    useEffect ( () => {\n\n        getGifs( category )\n        .then( imgs => {\n\n                setState({\n                    data: imgs,\n                    loading: false\n                });\n        });\n\n    }, [category]);\n\n    return state; // {data: [], loading: true};\n}\n","import React, { useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nexport const GifExpertApp = () => {\n  const [categories, setCategories] = useState(['One Punch']);\n\n  // const handleAdd = () => {\n  //   // setCategories( [...categories, 'HunterXHunter' ]);\n  //   setCategories((cats) => [...cats, 'HunterXHunter']);\n  // };\n\n  return (\n    <>\n      <h2 className=\"animate__animated animate__bounce animate__heartBeat\">GifExpertApp</h2>\n      <AddCategory setCategories={ setCategories } />\n      <hr />\n\n      <ol>\n        {categories.map(category => (\n          <GifGrid \n          key={ category }\n          category={ category } />\n        ))}\n      </ol>\n    </>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp }from './GifExpertApp';\n\nimport './index.css';\n\n\nReactDOM.render(\n  \n  \n    <GifExpertApp />,\n    \n  \n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}